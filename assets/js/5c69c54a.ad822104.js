"use strict";(self.webpackChunkbeta_BNB_Docs=self.webpackChunkbeta_BNB_Docs||[]).push([[6404],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return f}});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),s=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=s(n),f=o,m=u["".concat(l,".").concat(f)]||u[f]||d[f]||r;return n?a.createElement(m,i(i({ref:t},p),{},{components:n})):a.createElement(m,i({ref:t},p))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=u;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var s=2;s<r;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},52845:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return l},metadata:function(){return s},toc:function(){return p},default:function(){return u}});var a=n(87462),o=n(63366),r=(n(67294),n(3905)),i=["components"],c={sidebar_label:"Deploy NFTs"},l="Deploy NFTs on Aries Network",s={unversionedId:"bas/develop/Aries-Testnet/tutorials/deploy-erc721-tokens",id:"bas/develop/Aries-Testnet/tutorials/deploy-erc721-tokens",isDocsHomePage:!1,title:"Deploy NFTs on Aries Network",description:"This work is inspired by \u200bthis blog.",source:"@site/docs/bas/develop/Aries-Testnet/tutorials/deploy-erc721-tokens.md",sourceDirName:"bas/develop/Aries-Testnet/tutorials",slug:"/bas/develop/Aries-Testnet/tutorials/deploy-erc721-tokens",permalink:"/docs/bas/develop/Aries-Testnet/tutorials/deploy-erc721-tokens",editUrl:"https://github.com/RumeelHussainbnb/beta_BSC_Docs/docs/bas/develop/Aries-Testnet/tutorials/deploy-erc721-tokens.md",tags:[],version:"current",frontMatter:{sidebar_label:"Deploy NFTs"},sidebar:"bscSideBar",previous:{title:"Deploy ERC20 Tokens",permalink:"/docs/bas/develop/Aries-Testnet/tutorials/deploy-erc20-tokens"},next:{title:"Build BAS Demo App",permalink:"/docs/bas/bas-demo-app"}},p=[{value:"Setting up the Environment",id:"setting-up-the-environment",children:[],level:2},{value:"Getting the contract artifacts",id:"getting-the-contract-artifacts",children:[],level:2},{value:"Deploy the contract to a local blockchain",id:"deploy-the-contract-to-a-local-blockchain",children:[],level:2},{value:"Interact with our Token",id:"interact-with-our-token",children:[{value:"Token metadata",id:"token-metadata",children:[],level:3},{value:"Mint",id:"mint",children:[],level:3}],level:2},{value:"MetaData",id:"metadata",children:[],level:2},{value:"Deploy to a public testnet",id:"deploy-to-a-public-testnet",children:[],level:2},{value:"Deploy to Aries Testnet",id:"deploy-to-aries-testnet",children:[],level:2},{value:"Mint",id:"mint-1",children:[],level:2}],d={toc:p};function u(e){var t=e.components,n=(0,o.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"deploy-nfts-on-aries-network"},"Deploy NFTs on Aries Network"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"This work is inspired by \u200b",(0,r.kt)("a",{parentName:"p",href:"https://forum.openzeppelin.com/t/draft-create-an-nft-and-deploy-to-a-public-testnet-using-truffle/2961"},"this blog"),".")),(0,r.kt)("p",null,"In this tutorial we will create a non-fungible token (NFT) and deploy to the Aries testnet. ERC721 is a standard for representing ownership of, that is, where each token is unique such as in real estate or collectibles. We will use ",(0,r.kt)("a",{parentName:"p",href:"https://docs.openzeppelin.com/contracts/3.x/api/presets"},"Presents")," contracts in ",(0,r.kt)("a",{parentName:"p",href:"https://docs.openzeppelin.com/contracts/3.x/"},"OpenZeppelin Contracts")," to create an ERC721 and deploy using Truffle."),(0,r.kt)("h2",{id:"setting-up-the-environment"},"Setting up the Environment"),(0,r.kt)("p",null,"We begin by creating a new project."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ mkdir mynft && cd mynft\n$ npm init -y\n")),(0,r.kt)("p",null,"Then we install ",(0,r.kt)("a",{parentName:"p",href:"https://docs.openzeppelin.com/contracts"},"OpenZeppelin Contracts")," which has an implementation of ERC721."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ npm i --save-dev @openzeppelin/contracts\n")),(0,r.kt)("p",null,"Next we install a development tool for deployment, for this tutorial we will use ",(0,r.kt)("a",{parentName:"p",href:"https://www.trufflesuite.com/"},"Truffle")," but we could use any other tools such as Buidler, ",(0,r.kt)("a",{parentName:"p",href:"https://remix.ethereum.org"},"Remix")," or ",(0,r.kt)("a",{parentName:"p",href:"https://docs.openzeppelin.com/cli"},"OpenZeppelin CLI"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ npm i truffle\n")),(0,r.kt)("h2",{id:"getting-the-contract-artifacts"},"Getting the contract artifacts"),(0,r.kt)("p",null,"We will setup our Solidity project using ",(0,r.kt)("inlineCode",{parentName:"p"},"truffle init")," to create a ",(0,r.kt)("inlineCode",{parentName:"p"},"contracts")," directory and configuration to connect to a network."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ npx truffle init\nStarting init...\n================\n\n> Copying project files to\n\nInit successful, sweet!\n")),(0,r.kt)("p",null,"We are going to use Preset ",(0,r.kt)("inlineCode",{parentName:"p"},"ERC721PresetMinterPauserAutoId")," which is an ERC721 that is preset so it can be minted (with auto token ID and metadata URI), paused and burned."),(0,r.kt)("p",null,"The Preset contracts have already been compiled, so we only need to copy the artifacts to the ",(0,r.kt)("inlineCode",{parentName:"p"},"build/contracts")," directory."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'$ mkdir -p build/contracts/\n$ cp node_modules/@openzeppelin/contracts/build/contracts/* build/contracts/\nUsing your favorite editor create 2_deploy.js in the migrations directory with the following contents:\n// migrations/2_deploy.js\n// SPDX-License-Identifier: MIT\nconst ERC721PresetMinterPauserAutoId = artifacts.require("ERC721PresetMinterPauserAutoId");\n\nmodule.exports = function(deployer) {\n  deployer.deploy(ERC721PresetMinterPauserAutoId, "My NFT","NFT", "http://my-json-server.typicode.com/huangsuyu/nft/tokens");\n};\n')),(0,r.kt)("h2",{id:"deploy-the-contract-to-a-local-blockchain"},"Deploy the contract to a local blockchain"),(0,r.kt)("p",null,"We will use ",(0,r.kt)("inlineCode",{parentName:"p"},"truffle develop")," to open a Truffle console with a development blockchain."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Head over to Faucet and request test BNB")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ npx truffle develop\nTruffle Develop started at http://127.0.0.1:8545/\n\nAccounts:\n(0) 0xc7e4bbc4269fdc62f879834e363173aee7895f45\n\nPrivate Keys:\n(0) ef424b4dc91a9c9d6c1fc4ae0a50ce80668f3a955a7e982584b45577e2c70e27\n\nMnemonic: mechanic cannon setup general indicate people notable frown poet friend credit true\n\n\u26a0\ufe0f  Important \u26a0\ufe0f  : This mnemonic was created for you by Truffle. It is not secure.\nEnsure you do not use it on production blockchains, or else you risk losing funds.\n\ntruffle(develop)> migrate\n\nCompiling your contracts...\n===========================\n> Compiling ./contracts/Migrations.sol\n> Artifacts written to /Users/Documents/work/mynft/build/contracts\n> Compiled successfully using:\n   - solc: 0.5.16+commit.9c3226ce.Emscripten.clang\n\nStarting migrations...\n======================\n> Network name:    'develop'\n> Network id:      5777\n> Block gas limit: 67211175 (0x6691b7)\n\n1_initial_migration.js\n======================\n\n   Deploying 'Migrations'\n   ----------------------\n   > transaction hash:    0x9a17a50e6efd52ba3e55245c76c52b065d20587add45aee732c233987033e567\n   > Blocks: 0            Seconds: 0\n   > contract address:    0x77409B688eA5461078a31450F3138EA8324F72C9\n   > block number:        1\n   > block timestamp:     1604387655\n   > account:             0xc7e4bBc4269fdC62F879834E363173aeE7895F45\n   > balance:             99.99616114\n   > gas used:            191943 (0x2edc7)\n   > gas price:           20 gwei\n   > value sent:          0 ETH\n   > total cost:          0.00383886 ETH\n\n\n   > Saving migration to chain.\n   > Saving artifacts\n   -------------------------------------\n   > Total cost:          0.00383886 ETH\n\n\n2_deploy.js\n===========\n\n   Deploying 'ERC721PresetMinterPauserAutoId'\n   ------------------------------------------\n   > transaction hash:    0xc1a3994c2ad2ba706ac49934b4f480c7b3d9b94241f526afa2dfe91545145a4e\n   > Blocks: 0            Seconds: 0\n   > contract address:    0xEaB17D581552123695f03F12b09e378EE9463b44\n   > block number:        3\n   > block timestamp:     1604387655\n   > account:             0xc7e4bBc4269fdC62F879834E363173aeE7895F45\n   > balance:             99.92142266\n   > gas used:            3694586 (0x385ffa)\n   > gas price:           20 gwei\n   > value sent:          0 ETH\n   > total cost:          0.07389172 ETH\n\n\n   > Saving migration to chain.\n   > Saving artifacts\n   -------------------------------------\n   > Total cost:          0.07389172 ETH\n\n\nSummary\n=======\n> Total deployments:   2\n> Final cost:          0.07773058 ETH\n\ntruffle(develop)>\n")),(0,r.kt)("p",null,"We can deploy our new NFT to our development blockchain using ",(0,r.kt)("inlineCode",{parentName:"p"},"migrate")," command."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"truffle(develop)> migrate\n\nCompiling your contracts...\n===========================\n> Everything is up to date, there is nothing to compile.\n\n\n\nStarting migrations...\n======================\n> Network name:    'develop'\n> Network id:      5777\n> Block gas limit: 67211175 (0x6691b7)\n\n\n1_initial_migration.js\n======================\n\n   Replacing 'Migrations'\n   ----------------------\n   > transaction hash:    0x5d71b0a45a0fe20e2ca645393bb44b83fbd47351c009c48be0b8b84b610fb3b7\n   > Blocks: 0            Seconds: 0\n   > contract address:    0x37117c825cAC4a1FA765F6D8cd7787fB195849555\n   > block number:        1\n   > block timestamp:     1590736865\n   > account:             0x0445c33BdCe670D57189158b88c0034B579f37cE\n   > balance:             99.99671674\n   > gas used:            164163 (0x28143)\n   > gas price:           20 gwei\n   > value sent:          0 ETH\n   > total cost:          0.00328326 ETH\n\n\n   > Saving migration to chain.\n   > Saving artifacts\n   -------------------------------------\n   > Total cost:          0.00328326 ETH\n\n\n2_deploy.js\n===========\n\n   Replacing 'ERC721PresetMinterPauserAutoId'\n   ------------------------------------------\n   > transaction hash:    0x166d7b28f4afb949585b5a0e5b4151daa54acbcb70566b202fd62ab380a6650c\n   > Blocks: 0            Seconds: 0\n   > contract address:    0xDEE9411430c7Dd9b67fC6DA723DE729AdAB50AD7\n   > block number:        3\n   > block timestamp:     1590736866\n   > account:             0x0445c33BdCe670D57189158b88c0034B579f37cE\n   > balance:             99.92191642\n   > gas used:            36117675 (0x386c0b)\n   > gas price:           20 gwei\n   > value sent:          0 ETH\n   > total cost:          0.0739535 ETH\n\n\n   > Saving migration to chain.\n   > Saving artifacts\n   -------------------------------------\n   > Total cost:           0.0739535 ETH\n\n\nSummary\n=======\n> Total deployments:   2\n> Final cost:          0.07723676 ETH\n")),(0,r.kt)("p",null,"We can then use our deployed contract."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"truffle(develop)> nft = await ERC721PresetMinterPauserAutoId.deployed()\nundefined\n")),(0,r.kt)("h2",{id:"interact-with-our-token"},"Interact with our Token"),(0,r.kt)("p",null,"The accounts that we can use were displayed when we started ",(0,r.kt)("inlineCode",{parentName:"p"},"truffle develop")),(0,r.kt)("h3",{id:"token-metadata"},"Token metadata"),(0,r.kt)("p",null,"We can call the contract to read token metadata such as ",(0,r.kt)("inlineCode",{parentName:"p"},"name"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"symbol"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"baseURI"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"truffle(develop)> await nft.name()\n'My NFT'\ntruffle(develop)> await nft.symbol()\n'NFT'\ntruffle(develop)> await nft.baseURI()\n")),(0,r.kt)("h3",{id:"mint"},"Mint"),(0,r.kt)("p",null,"We can send a transaction to mint tokens to a given account, from an account with the minter role. In our case we are minting from the account which deployed the token, which is given the minter role."),(0,r.kt)("p",null,"We will mint 1 NFT with token ID 0."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"truffle(develop)> await nft.mint(\"0x0445c33bdce670d57189158b88c0034b579f37ce\")\n{ tx:\n   '0xd301a60dbb8ac187687f6639f200d4e6f2cfa065923092b3940330e35a26421d',\n  receipt:\n   { transactionHash:\n      '0xd301a60dbb8ac187687f6639f200d4e6f2cfa065923092b3940330e35a26421d',\n     transactionIndex: 0,\n     blockHash:\n      '0x3ad3cfcb26da0c969e9d5a5414a5e90a91a3a862c9e9082afc38a0ec0f1a5d00',\n     blockNumber: 5,\n     from: '0x0445c33bdce670d57189158b88c0034b579f37ce',\n     to: '0xdee9411430c7dd9b67fc6da723de729adab50ad7',\n     gasUsed: 156470,\n...\n")),(0,r.kt)("p",null,"We can check the owner of the token and the token URI for the metadata"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"truffle(develop)> await nft.ownerOf(1)\n'0x0445c33BdCe670D57189158b88c0034B579f37cE'\ntruffle(develop)> await nft.tokenURI(1)\n")),(0,r.kt)("h2",{id:"metadata"},"MetaData"),(0,r.kt)("p",null,"For this tutorial, we will use ",(0,r.kt)("a",{parentName:"p",href:"https://my-json-server.typicode.com/"},"My JSON Server")," where we can store a single JSON file in a GitHub repository that we can access via a fake JSON server."),(0,r.kt)("p",null,"For production we need to store our metadata in a permanent location that can exist for the life of the token."),(0,r.kt)("p",null,"A sample JSON for tokenID 1 is: ",(0,r.kt)("a",{parentName:"p",href:"http://my-json-server.typicode.com/huangsuyu/nft/tokens/1"},"http://my-json-server.typicode.com/huangsuyu/nft/tokens/1")),(0,r.kt)("h2",{id:"deploy-to-a-public-testnet"},"Deploy to a public testnet"),(0,r.kt)("p",null,"Next we will deploy to BAS Testnet ."),(0,r.kt)("p",null,"To deploy, we will use the instructions for ",(0,r.kt)("a",{parentName:"p",href:"https://forum.openzeppelin.com/t/connecting-to-public-test-networks-with-truffle/2960"},"Connecting to Public Test Networks with Truffle")),(0,r.kt)("p",null,"You will need the following:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"@truffle/hdwallet-provider")," installed"),(0,r.kt)("li",{parentName:"ul"},"Configure truffle-config.js for BAS testnet network"),(0,r.kt)("li",{parentName:"ul"},"A funded testnet account and mnemonic"),(0,r.kt)("li",{parentName:"ul"},"A ",(0,r.kt)("inlineCode",{parentName:"li"},"secrets.json")," or another secret-management solution. ",(0,r.kt)("strong",{parentName:"li"},"Make sure you don\u2019t commit this to GitHub!"))),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"truffle-config.js")," has the following testnet configuration:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"     testnet: {\n      provider: () => new HDWalletProvider(mnemonic, `https://bas-aries-public.nodereal.io`),\n      network_id: 117,\n      confirmations: 10,\n      timeoutBlocks: 200,\n      skipDryRun: true\n    }\n")),(0,r.kt)("h2",{id:"deploy-to-aries-testnet"},"Deploy to Aries Testnet"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ npx truffle migrate --network testnet\n\nCompiling your contracts...\n===========================\n> Everything is up to date, there is nothing to compile.\n\nStarting migrations...\n======================\n> Network name:    'develop'\n> Network id:      5777\n> Block gas limit: 67211175 (0x6691b7)\n\n\n1_initial_migration.js\n======================\n\n   Deploying 'Migrations'\n   ----------------------\n   > transaction hash:    0x9a17a50e6efd52ba3e55245c76c52b065d20587add45aee732c233987033e567\n   > Blocks: 0            Seconds: 0\n   > contract address:    0x77409B688eA5461078a31450F3138EA8324F72C9\n   > block number:        1\n   > block timestamp:     1604387655\n   > account:             0xc7e4bBc4269fdC62F879834E363173aeE7895F45\n   > balance:             99.99616114\n   > gas used:            191943 (0x2edc7)\n   > gas price:           20 gwei\n   > value sent:          0 ETH\n   > total cost:          0.00383886 ETH\n\n\n   > Saving migration to chain.\n   > Saving artifacts\n   -------------------------------------\n   > Total cost:          0.00383886 ETH\n\n\n2_deploy.js\n===========\n\n   Deploying 'ERC721PresetMinterPauserAutoId'\n   ------------------------------------------\n   > transaction hash:    0xc1a3994c2ad2ba706ac49934b4f480c7b3d9b94241f526afa2dfe91545145a4e\n   > Blocks: 0            Seconds: 0\n   > contract address:    0xEaB17D581552123695f03F12b09e378EE9463b44\n   > block number:        3\n   > block timestamp:     1604387655\n   > account:             0xc7e4bBc4269fdC62F879834E363173aeE7895F45\n   > balance:             99.92142266\n   > gas used:            3694586 (0x385ffa)\n   > gas price:           20 gwei\n   > value sent:          0 ETH\n   > total cost:          0.07389172 ETH\n\n\n   > Saving migration to chain.\n   > Saving artifacts\n   -------------------------------------\n   > Total cost:          0.07389172 ETH\n\n\nSummary\n=======\n> Total deployments:   2\n> Final cost:          0.07773058 ETH\n")),(0,r.kt)("h2",{id:"mint-1"},"Mint"),(0,r.kt)("p",null,"We can send a transaction to mint tokens to a given account, from an account with the minter role."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"truffle(develop)> nft = await ERC721PresetMinterPauserAutoId.deployed()\nundefined\n")),(0,r.kt)("p",null,"In our case we are minting from the account which deployed the token, which is given the minter role.\nTo see configured accounts run the command ",(0,r.kt)("inlineCode",{parentName:"p"},"accounts"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"truffle(testnet)> accounts\n[ '0x133d144f52705ceb3f5801b63b9ebccf4102f5ed',\nWe will mint 1 NFT with token ID 1. Specify the address that you want to be the token holder (0xc7e4bBc4269fdC62F879834E363173aeE7895F45 is a test account)\ntruffle(testnet)> await nft.mint(\"0x133d144f52705ceb3f5801b63b9ebccf4102f5ed\")\n{ tx:\n   '0x0d90d4a2a4ac3f33d5220deb11e8f65adf14a6669afd18abd4cce8ca7ab58e04',\n  receipt:\n   { blockHash: '0x724ba66bc1d799820c05a93ae67991b21bb769fd1e9dddd5db9f725f5f633331',\n     blockNumber: 3333746,\n     contractAddress: null,\n     cumulativeGasUsed: 164785,\n     from: '0x77737a65c296012c67f8c7f656d1df81827c9541',\n     gasUsed: 164785,\n...\n")))}u.isMDXComponent=!0}}]);