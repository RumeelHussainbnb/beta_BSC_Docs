"use strict";(self.webpackChunkbeta_BNB_Docs=self.webpackChunkbeta_BNB_Docs||[]).push([[9962],{3905:function(n,e,t){t.d(e,{Zo:function(){return p},kt:function(){return u}});var a=t(67294);function r(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function i(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,a)}return t}function o(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?i(Object(t),!0).forEach((function(e){r(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function l(n,e){if(null==n)return{};var t,a,r=function(n,e){if(null==n)return{};var t,a,r={},i=Object.keys(n);for(a=0;a<i.length;a++)t=i[a],e.indexOf(t)>=0||(r[t]=n[t]);return r}(n,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);for(a=0;a<i.length;a++)t=i[a],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(r[t]=n[t])}return r}var s=a.createContext({}),m=function(n){var e=a.useContext(s),t=e;return n&&(t="function"==typeof n?n(e):o(o({},e),n)),t},p=function(n){var e=m(n.components);return a.createElement(s.Provider,{value:e},n.children)},d={inlineCode:"code",wrapper:function(n){var e=n.children;return a.createElement(a.Fragment,{},e)}},c=a.forwardRef((function(n,e){var t=n.components,r=n.mdxType,i=n.originalType,s=n.parentName,p=l(n,["components","mdxType","originalType","parentName"]),c=m(t),u=r,g=c["".concat(s,".").concat(u)]||c[u]||d[u]||i;return t?a.createElement(g,o(o({ref:e},p),{},{components:t})):a.createElement(g,o({ref:e},p))}));function u(n,e){var t=arguments,r=e&&e.mdxType;if("string"==typeof n||r){var i=t.length,o=new Array(i);o[0]=c;var l={};for(var s in e)hasOwnProperty.call(e,s)&&(l[s]=e[s]);l.originalType=n,l.mdxType="string"==typeof n?n:r,o[1]=l;for(var m=2;m<i;m++)o[m]=t[m];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},53279:function(n,e,t){t.r(e),t.d(e,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return m},toc:function(){return p},default:function(){return c}});var a=t(87462),r=t(63366),i=(t(67294),t(3905)),o=["components"],l={},s="Get Extra Data From Your Full Node",m={unversionedId:"beaconchain/get-extra-data-from-fullnode",id:"beaconchain/get-extra-data-from-fullnode",isDocsHomePage:!1,title:"Get Extra Data From Your Full Node",description:"This document is intended for developers who are interested in transactions, order books, account changes, fee charges in every block and would like to build their own downstream services of the full node.",source:"@site/docs/beaconchain/get-extra-data-from-fullnode.md",sourceDirName:"beaconchain",slug:"/beaconchain/get-extra-data-from-fullnode",permalink:"/docs/beaconchain/get-extra-data-from-fullnode",editUrl:"https://github.com/bnb-chain/bnb-chain.github.io/blob/master/docs/beaconchain/get-extra-data-from-fullnode.md",tags:[],version:"current",frontMatter:{}},p=[{value:"Publish Different Messages to Local Files",id:"publish-different-messages-to-local-files",children:[],level:2},{value:"Set Kafka Broker Version",id:"set-kafka-broker-version",children:[{value:"1. OrderUpdates",id:"1-orderupdates",children:[],level:3},{value:"Changes",id:"changes",children:[],level:3},{value:"2. AccountBalance",id:"2-accountbalance",children:[],level:3},{value:"3. OrderBook",id:"3-orderbook",children:[],level:3},{value:"4. BlockFee",id:"4-blockfee",children:[],level:3},{value:"5. Transfers",id:"5-transfers",children:[],level:3},{value:"6. Staking Record",id:"6-staking-record",children:[],level:3},{value:"7. Reward Distribution",id:"7-reward-distribution",children:[],level:3},{value:"8. Slashing",id:"8-slashing",children:[],level:3},{value:"9. CrossTransfer",id:"9-crosstransfer",children:[],level:3},{value:"10. SideProposal",id:"10-sideproposal",children:[],level:3},{value:"11. BreatheBlock",id:"11-breatheblock",children:[],level:3}],level:2},{value:"Publish Different Messages to Kafka",id:"publish-different-messages-to-kafka",children:[],level:2}],d={toc:p};function c(n){var e=n.components,t=(0,r.Z)(n,o);return(0,i.kt)("wrapper",(0,a.Z)({},d,t,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"get-extra-data-from-your-full-node"},"Get Extra Data From Your Full Node"),(0,i.kt)("p",null,"This document is intended for developers who are interested in transactions, order books, account changes, fee charges in every block and would like to build their own downstream services of the full node.",(0,i.kt)("br",null),"\nPlease refer to ",(0,i.kt)("a",{parentName:"p",href:"/docs/beaconchain/fullnode"},"Running Full Node"),", if you still haven't deployed a full node."),(0,i.kt)("h2",{id:"publish-different-messages-to-local-files"},"Publish Different Messages to Local Files"),(0,i.kt)("p",null,"You can set the ",(0,i.kt)("inlineCode",{parentName:"p"},"publishLocal")," option to ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"nodebinary/fullnode/{network}/node/app.toml"),".",(0,i.kt)("br",null),"\nThe full node will append the messages each block published to ",(0,i.kt)("inlineCode",{parentName:"p"},"{fullnode home}/marketdata/marketdata.json")," (each line is a json object for a topic and height), and you can consume them in your own apps. The messages types are explained below."),(0,i.kt)("p",null,"Note: only block messages after this option get turned on can be saved. This function won't make up messages for already saved blocks."),(0,i.kt)("h2",{id:"set-kafka-broker-version"},"Set Kafka Broker Version"),(0,i.kt)("p",null,"Since the release of bnbchaind ",(0,i.kt)("inlineCode",{parentName:"p"},"v0.6.3"),", you can customize the version of ",(0,i.kt)("inlineCode",{parentName:"p"},"kafka broker")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"app.toml"),". The default value is ",(0,i.kt)("inlineCode",{parentName:"p"},"v2.1.0"),":"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"The recommended version 2.1.0 and the minimal version is 0.8.2.0")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'kafkaVersion = "2.1.0"\n')),(0,i.kt)("p",null,"If you are using another version of Kafka, please test the compatibility first."),(0,i.kt)("h3",{id:"1-orderupdates"},"1. OrderUpdates"),(0,i.kt)("p",null,"You can set  the ",(0,i.kt)("inlineCode",{parentName:"p"},"publishOrderUpdates")," option to ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"nodebinary/fullnode/{network}/node/app.toml"),".",(0,i.kt)("br",null),"\nThen, the full node will save all the trades that have been filled, orders that changed and proposals that been submitted."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Example:")),(0,i.kt)("p",null,"All those ",(0,i.kt)("a",{parentName:"p",href:"https://docs.bnbchain.org/docs/beaconchain/develop/node/extra-info#publish-different-messages-to-local-files"},"extra info")," can also be found in exported data from your fullnode."),(0,i.kt)("h3",{id:"changes"},"Changes"),(0,i.kt)("p",null,"In ",(0,i.kt)("inlineCode",{parentName:"p"},"trade")," data structure, there are five new fields: ",(0,i.kt)("inlineCode",{parentName:"p"},"SSrc"),",",(0,i.kt)("inlineCode",{parentName:"p"},"BSrc"),",",(0,i.kt)("inlineCode",{parentName:"p"},"SSingleFee"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"BSingleFee")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"TickerType"),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"SSrc"),": Source code of Sell order transaction"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"BSrc"),": Source code of Buy order transaction"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"SSingleFee"),": fee of matched sell order"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"BSingleFee"),": fee of matched buy order"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"TickerType"),": ticker type")),(0,i.kt)("p",null,"In ",(0,i.kt)("inlineCode",{parentName:"p"},"Order")," data structure, there is a new field: ",(0,i.kt)("inlineCode",{parentName:"p"},"singlefee"),". This is used to show the fee of this order."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Status")," is used to indicate the current status of this order. Namely there are 9 status:  0 for Acknowledge; 1 for Canceled ; 2 for Expired , 3 for IocNoFill, 4 for IocExpire, 5 for PartialFill, 6 for FullyFill, 7 for FailedBlocking, 8 for FailedMatching."),(0,i.kt)("p",null,"For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "Height": 36384232,\n  "Timestamp": 1569196830136718300,\n  "NumOfMsgs": 10,\n  "Trades": {\n    "NumOfMsgs": 2,\n    "Trades": [\n      {\n        "Id": "36384232-0",\n        "Symbol": "DEFI-FA5_BNB",\n        "Price": 345282,\n        "Qty": 23200000000,\n        "Sid": "5F511BE6120CE2F92877F3A1E92D408CE56A5CCC-62632",\n        "Bid": "4C28D006CF8061E05EEE50D17D8B2375CE09E7EC-71967",\n        "Sfee": "BNB:32042",\n        "Bfee": "BNB:32042",\n        "SSrc": 0,\n        "BSrc": 0,\n        "SSingleFee": "BNB:32042",\n        "BSingleFee": "BNB:32042",\n        "TickType": 5,\n        "SAddr": "bnb1tag3hesjpn30j2rh7ws7jt2q3njk5hxvsx023c",\n        "BAddr": "bnb1fs5dqpk0sps7qhhw2rghmzerwh8qnelv7tyat8"\n      },\n      {\n        "Id": "36384232-1",\n        "Symbol": "EQL-586_BNB",\n        "Price": 4798,\n        "Qty": 110000000000,\n        "Sid": "610BFE81695EFD89B19D27D1E8C17D57C0239C66-6367",\n        "Bid": "B3CEA961E95C4F104A791F6C33DB83458577BA76-5471",\n        "Sfee": "BNB:2111",\n        "Bfee": "BNB:2111",\n        "SSrc": 0,\n        "BSrc": 0,\n        "SSingleFee": "BNB:2111",\n        "BSingleFee": "BNB:2111",\n        "TickType": 2,\n        "SAddr": "bnb1vy9laqtftm7cnvvaylg73sta2lqz88rxs72mx7",\n        "BAddr": "bnb1k082jc0ft383qjnerakr8kurgkzh0wnk8gulnj"\n      }\n    ]\n  },\n  "Orders": {\n    "NumOfMsgs": 8,\n    "Orders": [\n      {\n        "Symbol": "DEFI-FA5_BNB",\n        "Status": 0,\n        "OrderId": "37D9383E6AD9AFEF6C5D8066ABA3ACA8C75D9F39-1724193",\n        "TradeId": "",\n        "Owner": "bnb1xlvns0n2mxh77mzaspn2hgav4rr4m8eerfju38",\n        "Side": 1,\n        "OrderType": 2,\n        "Price": 344271,\n        "Qty": 89600000000,\n        "LastExecutedPrice": 0,\n        "LastExecutedQty": 0,\n        "CumQty": 0,\n        "Fee": "",\n        "OrderCreationTime": 1569196830136718300,\n        "TransactionTime": 1569196830136718300,\n        "TimeInForce": 1,\n        "CurrentExecutionType": 0,\n        "TxHash": "D74A96022A2F090D7D739C1C6716481A215E0F7F10C430C28290758E9DC4EF73",\n        "SingleFee": ""\n      },\n      {\n        "Symbol": "EQL-586_BNB",\n        "Status": 0,\n        "OrderId": "B3CEA961E95C4F104A791F6C33DB83458577BA76-5471",\n        "TradeId": "",\n        "Owner": "bnb1k082jc0ft383qjnerakr8kurgkzh0wnk8gulnj",\n        "Side": 1,\n        "OrderType": 2,\n        "Price": 4798,\n        "Qty": 110000000000,\n        "LastExecutedPrice": 0,\n        "LastExecutedQty": 0,\n        "CumQty": 110000000000,\n        "Fee": "",\n        "OrderCreationTime": 1569196830136718300,\n        "TransactionTime": 1569196830136718300,\n        "TimeInForce": 1,\n        "CurrentExecutionType": 0,\n        "TxHash": "792BA5F932813F9C006075EAA090D82305AD049DDC570271FA8515339A874E97",\n        "SingleFee": ""\n      },\n      {\n        "Symbol": "DEFI-FA5_BNB",\n        "Status": 0,\n        "OrderId": "4C28D006CF8061E05EEE50D17D8B2375CE09E7EC-71967",\n        "TradeId": "",\n        "Owner": "bnb1fs5dqpk0sps7qhhw2rghmzerwh8qnelv7tyat8",\n        "Side": 1,\n        "OrderType": 2,\n        "Price": 345283,\n        "Qty": 23200000000,\n        "LastExecutedPrice": 0,\n        "LastExecutedQty": 0,\n        "CumQty": 23200000000,\n        "Fee": "",\n        "OrderCreationTime": 1569196830136718300,\n        "TransactionTime": 1569196830136718300,\n        "TimeInForce": 1,\n        "CurrentExecutionType": 0,\n        "TxHash": "574CB6DAF26C5D1A465A8D86760FFDFF3DA5946F9C02EB5B89051A8120844523",\n        "SingleFee": ""\n      },\n      {\n        "Symbol": "DEFI-FA5_BNB",\n        "Status": 0,\n        "OrderId": "5F511BE6120CE2F92877F3A1E92D408CE56A5CCC-62632",\n        "TradeId": "",\n        "Owner": "bnb1tag3hesjpn30j2rh7ws7jt2q3njk5hxvsx023c",\n        "Side": 2,\n        "OrderType": 2,\n        "Price": 345282,\n        "Qty": 23200000000,\n        "LastExecutedPrice": 0,\n        "LastExecutedQty": 0,\n        "CumQty": 23200000000,\n        "Fee": "",\n        "OrderCreationTime": 1569196830136718300,\n        "TransactionTime": 1569196830136718300,\n        "TimeInForce": 1,\n        "CurrentExecutionType": 0,\n        "TxHash": "9D8EF7CEAE5D2CDC4026F6306296D57764BB80099B3A65865971D8D71399B6EA",\n        "SingleFee": ""\n      },\n      {\n        "Symbol": "EQL-586_BNB",\n        "Status": 5,\n        "OrderId": "610BFE81695EFD89B19D27D1E8C17D57C0239C66-6367",\n        "TradeId": "36384232-1",\n        "Owner": "bnb1vy9laqtftm7cnvvaylg73sta2lqz88rxs72mx7",\n        "Side": 2,\n        "OrderType": 2,\n        "Price": 4798,\n        "Qty": 230000000000,\n        "LastExecutedPrice": 4798,\n        "LastExecutedQty": 110000000000,\n        "CumQty": 110000000000,\n        "Fee": "BNB:2111",\n        "OrderCreationTime": 1569196786802324000,\n        "TransactionTime": 1569196830136718300,\n        "TimeInForce": 1,\n        "CurrentExecutionType": 0,\n        "TxHash": "EDF132EBDA03382D2BFF7EF58CDE574D4E3FB9622BD8BCF12BA6ABECD692BA5C",\n        "SingleFee": "BNB:2111"\n      },\n      {\n        "Symbol": "DEFI-FA5_BNB",\n        "Status": 6,\n        "OrderId": "4C28D006CF8061E05EEE50D17D8B2375CE09E7EC-71967",\n        "TradeId": "36384232-0",\n        "Owner": "bnb1fs5dqpk0sps7qhhw2rghmzerwh8qnelv7tyat8",\n        "Side": 1,\n        "OrderType": 2,\n        "Price": 345283,\n        "Qty": 23200000000,\n        "LastExecutedPrice": 345282,\n        "LastExecutedQty": 23200000000,\n        "CumQty": 23200000000,\n        "Fee": "BNB:32042",\n        "OrderCreationTime": 1569196830136718300,\n        "TransactionTime": 1569196830136718300,\n        "TimeInForce": 1,\n        "CurrentExecutionType": 0,\n        "TxHash": "574CB6DAF26C5D1A465A8D86760FFDFF3DA5946F9C02EB5B89051A8120844523",\n        "SingleFee": "BNB:32042"\n      },\n      {\n        "Symbol": "DEFI-FA5_BNB",\n        "Status": 6,\n        "OrderId": "5F511BE6120CE2F92877F3A1E92D408CE56A5CCC-62632",\n        "TradeId": "36384232-0",\n        "Owner": "bnb1tag3hesjpn30j2rh7ws7jt2q3njk5hxvsx023c",\n        "Side": 2,\n        "OrderType": 2,\n        "Price": 345282,\n        "Qty": 23200000000,\n        "LastExecutedPrice": 345282,\n        "LastExecutedQty": 23200000000,\n        "CumQty": 23200000000,\n        "Fee": "BNB:32042",\n        "OrderCreationTime": 1569196830136718300,\n        "TransactionTime": 1569196830136718300,\n        "TimeInForce": 1,\n        "CurrentExecutionType": 0,\n        "TxHash": "9D8EF7CEAE5D2CDC4026F6306296D57764BB80099B3A65865971D8D71399B6EA",\n        "SingleFee": "BNB:32042"\n      },\n      {\n        "Symbol": "EQL-586_BNB",\n        "Status": 6,\n        "OrderId": "B3CEA961E95C4F104A791F6C33DB83458577BA76-5471",\n        "TradeId": "36384232-1",\n        "Owner": "bnb1k082jc0ft383qjnerakr8kurgkzh0wnk8gulnj",\n        "Side": 1,\n        "OrderType": 2,\n        "Price": 4798,\n        "Qty": 110000000000,\n        "LastExecutedPrice": 4798,\n        "LastExecutedQty": 110000000000,\n        "CumQty": 110000000000,\n        "Fee": "BNB:2111",\n        "OrderCreationTime": 1569196830136718300,\n        "TransactionTime": 1569196830136718300,\n        "TimeInForce": 1,\n        "CurrentExecutionType": 0,\n        "TxHash": "792BA5F932813F9C006075EAA090D82305AD049DDC570271FA8515339A874E97",\n        "SingleFee": "BNB:2111"\n      }\n    ]\n  },\n  "Proposals": {\n    "NumOfMsgs": 0,\n    "Proposals": null\n  },\n  "StakeUpdates": {\n    "NumOfMsgs": 0,\n    "CompletedUnbondingDelegations": null\n  }\n}\n')),(0,i.kt)("h3",{id:"2-accountbalance"},"2. AccountBalance"),(0,i.kt)("p",null,"You can set the ",(0,i.kt)("inlineCode",{parentName:"p"},"publishAccountBalance")," option to ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"nodebinary/fullnode/{network}/node/app.toml"),".",(0,i.kt)("br",null),"\nThen, the full node will save all the changed accounts."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"{\n    Owner:    string,\n    Fee:      string,\n    Balances: []{\n        Asset:  string,\n        Free:   int64,\n        Frozen: int64,\n        Locked: int64\n    }\n\n}\n")),(0,i.kt)("h3",{id:"3-orderbook"},"3. OrderBook"),(0,i.kt)("p",null,"You can set the ",(0,i.kt)("inlineCode",{parentName:"p"},"publishOrderBook")," option to ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"nodebinary/fullnode/{network}/node/app.toml"),".",(0,i.kt)("br",null),"\nThen, the full node will save all order book changes."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"{\n    Height:    int64,\n    Timestamp: int64,\n    NumOfMsgs: int,\n    Books:     []{\n       Symbol: string,\n       Buys:   []{\n            Price:   int64,\n            LastQty: int64\n       },\n       Sells:  []{\n            Price:   int64,\n            LastQty: int64\n       }\n    }\n}\n")),(0,i.kt)("h3",{id:"4-blockfee"},"4. BlockFee"),(0,i.kt)("p",null,"You can set the ",(0,i.kt)("inlineCode",{parentName:"p"},"publishBlockFee")," option to ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"nodebinary/fullnode/{network}/node/app.toml"),".",(0,i.kt)("br",null),"\nThen, the full node will save all the block fee charged."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"{\n    Height:     int64,\n    Fee:        string,\n    Validators: []string\n}\n")),(0,i.kt)("h3",{id:"5-transfers"},"5. Transfers"),(0,i.kt)("p",null,"You can set the ",(0,i.kt)("inlineCode",{parentName:"p"},"publishTransfer")," option to ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"nodebinary/fullnode/{network}/node/app.toml"),".",(0,i.kt)("br",null),"\nThen, the full node will save all the transfer transactions."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"{\n    Height:    int64,\n    Num:       int,\n    Timestamp: int64,\n    Transfers: []{\n        TxHash: string,\n        Memo: string,\n        From: string,\n        To:   []{\n            Addr:  string,\n            Coins: []{\n                Denom:  string,\n                Amount: int64\n            }\n        }\n    }\n}\n")),(0,i.kt)("h3",{id:"6-staking-record"},"6. Staking Record"),(0,i.kt)("p",null,"You can set the ",(0,i.kt)("inlineCode",{parentName:"p"},"publishStaking")," option to ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"nodebinary/fullnode/{network}/node/app.toml"),".\nThen, the full node will save all the messages about staking."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'{\n    "height":     int64,\n    "timestamp":  int64,\n    "numOfMsgs":  int,\n       "validators": []{\n        "feeAddr":      string,\n        "operatorAddr": string,\n        "consAddr":     string,\n        "jailed":       bool,\n        "status":       string,\n        "tokens":       int64,\n        "delegatorShares":int64,\n        "description":{\n          "moniker":  string,\n          "identity": string,\n          "website":  string,\n          "details":  string,\n        },\n        "bondHeight": int64,\n        "bondIntraTxCounter": int,\n        "commission":{\n            "rate":      int64,\n            "maxRate":   int64,\n            "maxChangeRate": int64,\n            "updateTime": int64,\n        },\n        "distributionAddr":string,\n        "sideChainId": string,\n        "sideConsAddr": string,\n        "sideFeeAddr": string\n      },\n      "removedValidators": map[string][]string, //key: chain id, value: operatorAddr\n      "delegatioins": map[string][]{\n        "delegator": string,\n        "validator": string,\n        "shares":    int64\n    }, // map key: chain-id\n    "unBondingDelegations": map[string][]{\n        "delegator": string,\n        "validator": string,\n        "creationHeight": int64,\n        "minTime": int64,\n        "initialBalance": {\n            "denom":  string,\n            "amount": int64\n        },\n        "balance": {\n            "denom":  string,\n            "amount": int64\n        }\n    }, // map key: chain id\n    "reDelegations": map[string][]{\n        "delegator": string,\n        "srcValidator": string,\n        "dstValidator": string,\n        "creationHeight": int64,\n        "sharesSrc": int64,\n        "sharesDst": int64,\n        "initialBalance": {\n            "denom":  string,\n            "amount": int64\n        },\n        "balance": {\n            "denom":  string,\n            "amount": int64\n        },\n        "minTime": int64\n    }, // map key: chain id\n    "completedUBDs": map[string][]{\n        "validator": string,\n        "delegator": string,\n        "amount":  {\n            "denom":  string,\n            "amount": int64\n        }\n    },\n    "completedREDs": map[string][]{\n        "delegator": string,\n        "srcValidator": string,\n        "dstValidator": string\n    },\n    "delegateEvents": map[string][]{\n        "validator": string,\n        "delegator": string,\n        "amount":  {\n            "denom":  string,\n            "amount": int64\n        },\n        "txHash": string\n    },\n    "unDelegateEvents": map[string][]{\n        "validator": string,\n        "delegator": string,\n        "amount":  {\n            "denom":  string,\n            "amount": int64\n        },\n        "txHash": string\n    },\n    "reDelegateEvents": map[string][]{\n        "delegator": string,\n        "srcValidator": string,\n        "dstValidator": string,\n        "amount":  {\n            "denom":  string,\n            "amount": int64\n        },\n        "txHash": string\n    },\n    "electedValidators": map[string][]{\n        "feeAddr":      string,\n        "operatorAddr": string,\n        "consAddr":     string,\n        "jailed":       bool,\n        "status":       string,\n        "tokens":       int64,\n        "delegatorShares":int64,\n        "description":{\n          "moniker":  string,\n          "identity": string,\n          "website":  string,\n          "details":  string,\n},\n        "bondHeight": int64,\n        "bondIntraTxCounter": int,\n        "commission":{\n            "rate":      int64,\n            "maxRate":   int64,\n            "maxChangeRate": int64,\n            "updateTime": int64,\n        },\n        "distributionAddr":string,\n        "sideChainId": string,\n        "sideConsAddr": string,\n        "sideFeeAddr": string\n    }\n}\n\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Schema")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "type": "record",\n    "name": "Staking",\n    "namespace": "org.binance.dex.model.avro",\n    "fields": [\n        {"name": "height", "type": "long"},\n        {"name": "timestamp", "type": "long" },\n        {"name": "numOfMsgs", "type": "int" },\n        {"name": "validators", "type": ["null", {\n            "type": "array",\n            "items": {\n                "type": "record",\n                "name": "Validator",\n                "namespace": "org.binance.dex.model.avro",\n                "fields": [\n                    {"name": "feeAddr", "type": "string"},\n                    {"name": "operatorAddr", "type": "string"},\n                    {"name": "consAddr", "type": ["null","string"], "default": "null"},\n                    {"name": "jailed", "type": "boolean"},\n                    {"name": "status", "type": "string"},\n                    {"name": "tokens", "type": "long"},\n                    {"name": "delegatorShares", "type": "long"},\n                    {"name": "description", "type": {\n                        "type": "record",\n                        "name": "Description",\n                        "namespace": "org.binance.dex.model.avro",\n                        "fields": [\n                            {"name": "moniker", "type": "string"},\n                            {"name": "identity", "type": "string"},\n                            {"name": "website", "type": "string"},\n                            {"name": "details", "type": "string"}\n                        ]\n                    }},\n                    {"name": "bondHeight", "type": "long"},\n                    {"name": "bondIntraTxCounter", "type": "int"},\n                    {"name": "commission", "type": {\n                        "type": "record",\n                        "name": "Commission",\n                        "namespace": "org.binance.dex.model.avro",\n                        "fields": [\n                            {"name": "rate", "type": "long"},\n                            {"name": "maxRate", "type": "long"},\n                            {"name": "maxChangeRate", "type": "long"},\n                            {"name": "updateTime", "type": "long"}\n                        ]\n                    }},\n                    {"name": "distributionAddr", "type": "string"},\n                    {"name": "sideChainId", "type": "string"},\n                    {"name": "sideConsAddr", "type": "string"},\n                    {"name": "sideFeeAddr", "type": "string"}\n                ]\n            }\n        }], "default": "null"},\n        {"name": "removedValidators", "type": ["null", {\n            "type": "map",\n            "values": {\n                "type": "array",\n                "items": {"type": "string"}\n            }\n        }], "default": null},\n        {"name": "delegations", "type": ["null",{\n            "type": "map",\n            "values": {\n                "type": "array",\n                "items": {\n                    "type": "record",\n                    "name": "Delegation",\n                    "namespace": "org.binance.dex.model.avro",\n                    "fields": [\n                        {"name": "delegator", "type": "string"},\n                        {"name": "validator", "type": "string"},\n                        {"name": "shares", "type": "long"}\n                    ]\n                }\n            }\n        }], "default": null},\n        {"name": "unBondingDelegations", "type": ["null",{\n            "type": "map",\n            "values": {\n                "type": "array",\n                "items": {\n                    "type": "record",\n                    "name": "UnBondingDelgation",\n                    "namespace": "org.binance.dex.model.avro",\n                    "fields": [\n                        {"name": "delegator", "type": "string"},\n                        {"name": "validator", "type": "string"},\n                        {"name": "creationHeight", "type": "long"},\n                        {"name": "minTime", "type": "long"},\n                        {"name": "initialBalance", "type": {\n                            "type": "record",\n                            "name": "Coin",\n                            "namespace": "org.binance.dex.model.avro",\n                            "fields": [\n                                { "name": "denom", "type": "string" },\n                                { "name": "amount", "type": "long" }\n                            ]\n                        }},\n                        {"name": "balance", "type": "org.binance.dex.model.avro.Coin"}\n                    ]\n                }\n            }\n        }], "default": null},\n        {"name": "reDelegations", "type": ["null",{\n            "type": "map",\n            "values": {\n                "type": "array",\n                "items": {\n                    "type": "record",\n                    "name": "ReDelegation",\n                    "namespace": "org.binance.dex.model.avro",\n                    "fields": [\n                        {"name": "delegator", "type": "string"},\n                        {"name": "srcValidator", "type": "string"},\n                        {"name": "dstValidator", "type": "string"},\n                        {"name": "creationHeight", "type": "long"},\n                        {"name": "sharesSrc", "type": "long"},\n                        {"name": "sharesDst", "type": "long"},\n                        {"name": "initialBalance", "type": "org.binance.dex.model.avro.Coin" },\n                        {"name": "balance", "type": "org.binance.dex.model.avro.Coin" },\n                        {"name": "minTime", "type": "long"}\n                    ]\n                }\n            }\n        }], "default": null},\n        {"name": "completedUBDs", "type": ["null",{\n            "type": "map",\n            "values": {\n                "type": "array",\n                "items": {\n                    "type": "record",\n                    "name": "CompletedUnbondingDelegation",\n                    "namespace": "org.binance.dex.model.avro",\n                    "fields": [\n                        { "name": "validator", "type": "string" },\n                        { "name": "delegator", "type": "string" },\n                        { "name": "amount", "type": "org.binance.dex.model.avro.Coin"}\n                    ]\n                }\n            }\n        }],  "default": null},\n        {"name": "completedREDs", "type": ["null",{\n            "type": "map",\n            "values": {\n                "type": "array",\n                "items": {\n                    "type": "record",\n                    "name": "CompletedReDelegation",\n                    "namespace": "org.binance.dex.model.avro",\n                    "fields": [\n                        { "name": "delegator", "type": "string" },\n                        { "name": "srcValidator", "type": "string" },\n                        { "name": "dstValidator", "type": "string" }\n                    ]\n                }\n            }\n        }],  "default": null},\n        {"name": "delegateEvents", "type": ["null", {\n            "type": "map",\n            "values": {\n                "type": "array",\n                "items": {\n                    "type": "record",\n                    "name": "DelegateEvent",\n                    "namespace": "org.binance.dex.model.avro",\n                    "fields": [\n                        {"name": "delegator", "type": "string"},\n                        {"name": "validator", "type": "string"},\n                        {"name": "amount", "type": "org.binance.dex.model.avro.Coin"},\n                        {"name": "txHash", "type": "string"}\n                    ]\n                }\n            }\n        }], "default": null},\n        {"name": "unDelegateEvents", "type": ["null", {\n            "type": "map",\n            "values": {\n                "type": "array",\n                "items": {\n                    "type": "record",\n                    "name": "UndelegateEvent",\n                    "namespace": "org.binance.dex.model.avro",\n                    "fields": [\n                        {"name": "delegator", "type": "string"},\n                        {"name": "validator", "type": "string"},\n                        {"name": "amount", "type": "org.binance.dex.model.avro.Coin"},\n                        {"name": "txHash", "type": "string"}\n                    ]\n                }\n            }\n        }], "default": null},\n        {"name": "reDelegateEvents", "type": ["null", {\n            "type": "map",\n            "values": {\n                "type": "array",\n                "items": {\n                    "type": "record",\n                    "name": "RedelegateEvent",\n                    "namespace": "org.binance.dex.model.avro",\n                    "fields": [\n                        {"name": "delegator", "type": "string"},\n                        {"name": "srcValidator", "type": "string"},\n                        {"name": "dstValidator", "type": "string"},\n                        {"name": "amount", "type": "org.binance.dex.model.avro.Coin"},\n                        {"name": "txHash", "type": "string"}\n                    ]\n                }\n            }\n        }], "default": null},\n        {"name": "electedValidators", "type": ["null", {\n            "type": "map",\n            "values": {\n                "type": "array",\n                "items": "org.binance.dex.model.avro.Validator"\n            }\n        }], "default": null}\n    ]\n}\n')),(0,i.kt)("h3",{id:"7-reward-distribution"},"7. Reward Distribution"),(0,i.kt)("p",null,"You can set the ",(0,i.kt)("inlineCode",{parentName:"p"},"publishDistributeReward")," option to ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"nodebinary/fullnode/{network}/node/app.toml"),".\nThen, the full node will save all the messages about reward distribution."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'{\n    "height":     int64,\n    "timestamp":  int64,\n    "numOfMsgs":  int,\n    "distributions" : map[string][]{\n        "validator": string,\n        "selfDelegator": string,\n        "distributeAddr": string,\n        "valTokens": int64,\n        "totalReward": int64,\n        "commission": int64,\n        "rewards": []{\n            "delegator": string,\n            "delegationTokens": int64,\n            "reward": int64\n        }\n    } // map key: chain id\n}\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Schema")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'{\n    "type": "record",\n    "name": "Distribution",\n    "namespace": "org.binance.dex.model.avro",\n    "fields": [\n        { "name": "height", "type": "long" },\n        { "name": "timestamp", "type": "long" },\n        { "name": "numOfMsgs", "type": "int" },\n        { "name": "distributions", "type": {\n                "type": "map",\n                "values": {\n                    "type": "array",\n                    "items": {\n                        "type": "record",\n                        "name": "DistributionData",\n                        "namespace": "org.binance.dex.model.avro",\n                        "fields": [\n                            {"name": "validator", "type": "string"},\n                            {"name": "selfDelegator","type": "string"},\n                            {"name": "distributeAddr","type": "string"},\n                            {"name": "valTokens", "type": "long"},\n                            {"name": "totalReward", "type": "long"},\n                            {"name": "commission", "type": "long"},\n                            {"name": "rewards", "type":{\n                                "type": "array",\n                                "items": {\n                                    "type": "record",\n                                    "name": "Reward",\n                                    "namespace": "org.binance.dex.model.avro",\n                                    "fields":[\n                                        {"name": "delegator", "type": "string"},\n                                        {"name": "delegationTokens", "type": "long"},\n                                        {"name": "reward", "type": "long"}\n                                    ]\n                                }\n                            }}\n                        ]\n                    }\n                }\n            }\n        }\n    ]\n}\n')),(0,i.kt)("h3",{id:"8-slashing"},"8. Slashing"),(0,i.kt)("p",null,"You can set the ",(0,i.kt)("inlineCode",{parentName:"p"},"publishSlashing")," option to ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"nodebinary/fullnode/{network}/node/app.toml"),".\nThen, the full node will save all the messages about slashing."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'{\n    "height":     int64,\n    "timestamp":  int64,\n    "numOfMsgs":  int,\n    "slashData":  map[string][]{\n        "validator": string,\n        "infractionType": int,\n        "infractionHeight": int64,\n        "jailUtil": int64,\n        "slashAmount": int64,\n        "toFeePool": int64,\n        "submitter": string,\n        "submitterReward": int64,\n        "validatorsCompensation": []{\n            "address": string,\n            "amount": int64\n        }\n    }\n}\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Schema")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "type": "record",\n    "name": "Slashing",\n    "namespace": "org.binance.dex.model.avro",\n    "fields": [\n        { "name": "height", "type": "long" },\n        { "name": "timestamp", "type": "long" },\n        { "name": "numOfMsgs", "type": "int" },\n        { "name": "slashData", "type": {\n            "type": "map",\n            "values": {\n                "type": "array",\n                "items": {\n                    "type": "record",\n                    "name": "SlashData",\n                    "namespace": "org.binance.dex.model.avro",\n                    "fields": [\n                        {"name": "validator", "type": "string"},\n                        {"name": "infractionType", "type": "int"},\n                        {"name": "infractionHeight", "type": "long"},\n                        {"name": "jailUtil", "type": "long"},\n                        {"name": "slashAmount", "type": "long"},\n                        {"name": "toFeePool", "type": "long"},\n                        {"name": "submitter", "type": "string"},\n                        {"name": "submitterReward", "type": "long"},\n                        {"name": "validatorsCompensation", "type":{\n                            "type": "array",\n                            "items": {\n                                "type": "record",\n                                "name": "AllocatedAmt",\n                                "namespace": "org.binance.dex.model.avro",\n                                "fields":[\n                                    {"name": "address", "type": "string"},\n                                    {"name": "amount", "type": "long"}\n                                ]\n                            }\n                        }}\n                    ]\n                }\n            }\n        }}\n    ]\n}\n')),(0,i.kt)("h3",{id:"9-crosstransfer"},"9. CrossTransfer"),(0,i.kt)("p",null,"You can set the ",(0,i.kt)("inlineCode",{parentName:"p"},"publishCrossTransfer")," option to ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"nodebinary/fullnode/{network}/node/app.toml"),".\nThen, the full node will save all the messages about cross transfer."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'{\n    "height":     int64,\n    "timestamp":  int64,\n    "num":        int,\n    "transfers":  []{\n        "txhash": string,\n        "type": string,\n        "relayerFee": int64,\n        "chainid": string,\n        "from": "string",\n        "denom": string,\n        "contract": string,\n        "decimals": int,\n        "to": []{\n            "addr": string,\n            "amount": int64\n        }\n    }\n}\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Schema")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "type": "record",\n    "name": "CrossTransfers",\n    "namespace": "com.company",\n    "fields": [\n        { "name": "height", "type": "long"},\n        { "name": "num", "type": "int" },\n        { "name": "timestamp", "type": "long" },\n        { "name": "transfers",\n          "type": {\n            "type": "array",\n            "items": {\n                "type": "record",\n                "name": "Transfer",\n                "namespace": "com.company",\n                "fields": [\n                    { "name": "txhash", "type": "string" },\n                    { "name": "type", "type": "string" },\n                    { "name": "relayerFee", "type": "long" },\n                    { "name": "chainid", "type": "string" },\n                    { "name": "from", "type": "string" },\n                    { "name": "denom", "type": "string" },\n                    { "name": "contract", "type": "string" },\n                    { "name": "decimals", "type": "int" },\n                    { "name": "to",\n                          "type": {\n                             "type": "array",\n                            "items": {\n                                "type": "record",\n                                "name": "Receiver",\n                                "namespace": "com.company",\n                                "fields": [\n                                    { "name": "addr", "type": "string" },\n                                    { "name": "amount", "type": "long" }\n                                ]\n                            }\n                          }\n                    }\n                ]\n            }\n          }\n        }\n    ]\n}\n')),(0,i.kt)("h3",{id:"10-sideproposal"},"10. SideProposal"),(0,i.kt)("p",null,"You can set the ",(0,i.kt)("inlineCode",{parentName:"p"},"publishSideProposal")," option to ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"nodebinary/fullnode/{network}/node/app.toml"),".\nThen, the full node will save all the messages about side proposals."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'{\n    "height":     int64,\n    "timestamp":  int64,\n    "numOfMsgs":  int,\n    "proposals":  []{\n        "id": int64,\n        "chainid": string,\n        "status": string\n    }\n}\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Schema")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "type": "record",\n    "name": "SideProposals",\n    "namespace": "com.company",\n    "fields": [\n        { "name": "height", "type": "long" },\n        { "name": "timestamp", "type": "long" },\n        { "name": "numOfMsgs", "type": "int" },\n        { "name": "proposals", "type": {\n            "type": "array",\n            "items":\n            {\n                "type": "record",\n                "name": "Proposal",\n                "namespace": "org.binance.dex.model.avro",\n                "fields": [\n                    { "name": "id", "type": "long" },\n                    { "name": "chainid", "type": "string" },\n                    { "name": "status", "type": "string" }\n                ]\n            }\n           }\n        }\n    ]\n}\n')),(0,i.kt)("h3",{id:"11-breatheblock"},"11. BreatheBlock"),(0,i.kt)("p",null,"You can set the ",(0,i.kt)("inlineCode",{parentName:"p"},"publichBreatheBlock")," option to ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"nodebinary/fullnode/{network}/node/app.toml"),". Then, the full node will save all the messages about side proposals."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'{\n    "height":     int64,\n    "timestamp":  int64\n}\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Schema")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "type": "record",\n    "name": "BreatheBlock",\n    "namespace": "org.binance.dex.model.avro",\n    "fields": [\n        {"name": "height", "type": "long"},\n        {"name": "timestamp", "type": "long"}\n    ]\n}\n')),(0,i.kt)("h2",{id:"publish-different-messages-to-kafka"},"Publish Different Messages to Kafka"),(0,i.kt)("p",null,"You can set the ",(0,i.kt)("inlineCode",{parentName:"p"},"publishKafka")," option to ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"nodebinary/fullnode/{network}/node/app.toml"),".",(0,i.kt)("br",null),"\nThen, the full node will save messages that you are interested into Kafka, and you can consume them in your own apps.",(0,i.kt)("br",null),"\nThe message is encoded based on ",(0,i.kt)("inlineCode",{parentName:"p"},"Avro")," serialization system.",(0,i.kt)("br",null),"\nTheir schemas are shown below:",(0,i.kt)("br",null)),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"OrderUpdates"),":")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "type": "record",\n    "name": "ExecutionResults",\n    "namespace": "org.binance.dex.model.avro",\n    "fields": [\n        { "name": "height", "type": "long" },\n        { "name": "timestamp", "type": "long" },\n        { "name": "numOfMsgs", "type": "int" },\n        { "name": "trades", "type": ["null", {\n            "type": "record",\n            "name": "Trades",\n            "namespace": "org.binance.dex.model.avro",\n            "fields": [\n                { "name": "numOfMsgs", "type": "int" },\n                { "name": "trades", "type": {\n                    "type": "array",\n                    "items":\n                        {\n                            "type": "record",\n                            "name": "Trade",\n                            "namespace": "org.binance.dex.model.avro",\n                            "fields": [\n                                { "name": "symbol", "type": "string" },\n                                { "name": "id", "type": "string" },\n                                { "name": "price", "type": "long" },\n                                { "name": "qty", "type": "long" },\n                                { "name": "sid", "type": "string" },\n                                { "name": "bid", "type": "string" },\n                                { "name": "sfee", "type": "string" },\n                                { "name": "bfee", "type": "string" },\n                                { "name": "saddr", "type": "string" },\n                                { "name": "baddr", "type": "string" }\n                            ]\n                        }\n                    }\n                }\n            ]\n        }], "default": null },\n        { "name": "orders", "type": ["null", {\n            "type": "record",\n            "name": "Orders",\n            "namespace": "org.binance.dex.model.avro",\n            "fields": [\n                { "name": "numOfMsgs", "type": "int" },\n                { "name": "orders", "type": {\n                    "type": "array",\n                    "items":\n                    {\n                        "type": "record",\n                        "name": "Order",\n                        "namespace": "org.binance.dex.model.avro",\n                        "fields": [\n                            { "name": "symbol", "type": "string" },\n                            { "name": "status", "type": "string" },\n                            { "name": "orderId", "type": "string" },\n                            { "name": "tradeId", "type": "string" },\n                            { "name": "owner", "type": "string" },\n                            { "name": "side", "type": "int" },\n                            { "name": "orderType", "type": "int" },\n                            { "name": "price", "type": "long" },\n                            { "name": "qty", "type": "long" },\n                            { "name": "lastExecutedPrice", "type": "long" },\n                            { "name": "lastExecutedQty", "type": "long" },\n                            { "name": "cumQty", "type": "long" },\n                            { "name": "fee", "type": "string" },\n                            { "name": "orderCreationTime", "type": "long" },\n                            { "name": "transactionTime", "type": "long" },\n                            { "name": "timeInForce", "type": "int" },\n                            { "name": "currentExecutionType", "type": "string" },\n                            { "name": "txHash", "type": "string" }\n                        ]\n                    }\n                   }\n                }\n            ]\n        }], "default": null },\n        { "name": "proposals", "type": ["null", {\n            "type": "record",\n            "name": "Proposals",\n            "namespace": "org.binance.dex.model.avro",\n            "fields": [\n                { "name": "numOfMsgs", "type": "int" },\n                { "name": "proposals", "type": {\n                    "type": "array",\n                    "items":\n                    {\n                        "type": "record",\n                        "name": "Proposal",\n                        "namespace": "org.binance.dex.model.avro",\n                        "fields": [\n                            { "name": "id", "type": "long" },\n                            { "name": "status", "type": "string" }\n                        ]\n                    }\n                   }\n                }\n            ]\n        }], "default": null },\n        { "name": "stakeUpdates", "type": ["null", {\n            "type": "record",\n            "name": "StakeUpdates",\n            "namespace": "org.binance.dex.model.avro",\n            "fields": [\n                { "name": "numOfMsgs", "type": "int" },\n                { "name": "completedUnbondingDelegations", "type": {\n                    "type": "array",\n                    "items":\n                    {\n                        "type": "record",\n                        "name": "CompletedUnbondingDelegation",\n                        "namespace": "org.binance.dex.model.avro",\n                        "fields": [\n                            { "name": "validator", "type": "string" },\n                            { "name": "delegator", "type": "string" },\n                            { "name": "amount", "type": {\n                                    "type": "record",\n                                    "name": "Coin",\n                                    "namespace": "org.binance.dex.model.avro",\n                                    "fields": [\n                                        { "name": "denom", "type": "string" },\n                                        { "name": "amount", "type": "long" }\n                                    ]\n                                }\n                            }\n                        ]\n                     }\n                   }\n                }\n            ]\n        }], "default": null }\n    ]\n}\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"OrderBooksSchema"),":")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'{\n    "type": "record",\n    "name": "Books",\n    "namespace": "com.company",\n    "fields": [\n        { "name": "height", "type": "long" },\n        { "name": "timestamp", "type": "long" },\n        { "name": "numOfMsgs", "type": "int" },\n        { "name": "books", "type": {\n            "type": "array",\n            "items":\n                {\n                    "type": "record",\n                    "name": "OrderBookDelta",\n                    "namespace": "com.company",\n                    "fields": [\n                        { "name": "symbol", "type": "string" },\n                        { "name": "buys", "type": {\n                            "type": "array",\n                            "items": {\n                                "type": "record",\n                                "name": "PriceLevel",\n                                "namespace": "com.company",\n                                "fields": [\n                                    { "name": "price", "type": "long" },\n                                    { "name": "lastQty", "type": "long" }\n                                ]\n                            }\n                        } },\n                        { "name": "sells", "type": {\n                            "type": "array",\n                            "items": "com.company.PriceLevel"\n                        } }\n                    ]\n                }\n            }, "default": []\n        }\n    ]\n}\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"AccountBalanceSchema"),":")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n            "type": "record",\n            "name": "Accounts",\n            "namespace": "com.company",\n            "fields": [\n                { "name": "height", "type": "long" },\n                { "name": "numOfMsgs", "type": "int" },\n                { "name": "accounts", "type": {\n                    "type": "array",\n                    "items":\n                        {\n                            "type": "record",\n                            "name": "Account",\n                            "namespace": "com.company",\n                            "fields": [\n                                { "name": "owner", "type": "string" },\n                                { "name": "fee", "type": "string" },\n                                { "name": "balances", "type": {\n                                        "type": "array",\n                                        "items": {\n                                            "type": "record",\n                                            "name": "AssetBalance",\n                                            "namespace": "com.company",\n                                            "fields": [\n                                                { "name": "asset", "type": "string" },\n                                                { "name": "free", "type": "long" },\n                                                { "name": "frozen", "type": "long" },\n                                                { "name": "locked", "type": "long" }\n                                            ]\n                                        }\n                                    }\n                                }\n                            ]\n                        }\n                   }, "default": []\n                }\n            ]\n        }\n\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"BlockFeeSchema"),":")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "type": "record",\n    "name": "BlockFee",\n    "namespace": "com.company",\n    "fields": [\n        { "name": "height", "type": "long"},\n        { "name": "fee", "type": "string"},\n        { "name": "validators", "type": { "type": "array", "items": "string" }}\n    ]\n}\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"TransfersSchema"),":")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "type": "record",\n    "name": "Transfers",\n    "namespace": "com.company",\n    "fields": [\n        { "name": "height", "type": "long"},\n        { "name": "num", "type": "int" },\n        { "name": "timestamp", "type": "long" },\n        { "name": "transfers",\n          "type": {\n            "type": "array",\n            "items": {\n                "type": "record",\n                "name": "Transfer",\n                "namespace": "com.company",\n                "fields": [\n                    { "name": "txhash", "type": "string" },\n                    { "name": "from", "type": "string" },\n                    { "name": "to",\n                        "type": {\n                            "type": "array",\n                            "items": {\n                                "type": "record",\n                                "name": "Receiver",\n                                "namespace": "com.company",\n                                "fields": [\n                                    { "name": "addr", "type": "string" },\n                                    { "name": "coins",\n                                        "type": {\n                                            "type": "array",\n                                            "items": {\n                                                "type": "record",\n                                                "name": "Coin",\n                                                "namespace": "com.company",\n                                                "fields": [\n                                                    { "name": "denom", "type": "string" },\n                                                    { "name": "amount", "type": "long" }\n                                                ]\n                                            }\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            }\n          }\n        }\n    ]\n}\n')))}c.isMDXComponent=!0}}]);