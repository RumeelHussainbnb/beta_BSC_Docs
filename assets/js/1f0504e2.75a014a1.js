"use strict";(self.webpackChunkbeta_BNB_Docs=self.webpackChunkbeta_BNB_Docs||[]).push([[6105],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return m}});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(r),m=a,b=p["".concat(l,".").concat(m)]||p[m]||d[m]||o;return r?n.createElement(b,i(i({ref:t},u),{},{components:r})):n.createElement(b,i({ref:t},u))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},36801:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return u},default:function(){return p}});var n=r(87462),a=r(63366),o=(r(67294),r(3905)),i=["components"],s={sidebar_label:"Overview",sidebar_position:2,hide_table_of_contents:!1},l="BAS Architecture",c={unversionedId:"bas/architecture/overview",id:"bas/architecture/overview",isDocsHomePage:!1,title:"BAS Architecture",description:"BAS is a modular framework for creating BSC-compatible sidechains. It defines requirements for integration with the BSC ecosystem and brings development-ready EVM-compatible features like staking, RPC-API, and smart contracts. Since BSC doesn\u2019t rely on the BAS security model, there is no default embedded production-ready bridge solution between the BSC and BAS networks. Instead, BAS can provide protocols and standards for integrating third-party bridges that can be managed by the BAS validator set of other projects like AnySwap or Celer Network cBridge, of course, if they trust the BAS development team.",source:"@site/docs/bas/architecture/overview.md",sourceDirName:"bas/architecture",slug:"/bas/architecture/overview",permalink:"/docs/bas/architecture/overview",editUrl:"https://github.com/RumeelHussainbnb/beta_BSC_Docs/docs/bas/architecture/overview.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_label:"Overview",sidebar_position:2,hide_table_of_contents:!1},sidebar:"bscSideBar",previous:{title:"When to Choose BAS",permalink:"/docs/bas/overview/whentochooseBAS"},next:{title:"Circulation Model and Native Asset Bridge",permalink:"/docs/bas/architecture/circulation-model-and-native-asset-bridge"}},u=[{value:"BAS structure &amp; integration",id:"bas-structure--integration",children:[],level:2},{value:"Modules",id:"modules",children:[],level:2},{value:"Repositories",id:"repositories",children:[],level:2}],d={toc:u};function p(e){var t=e.components,s=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},d,s,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"bas-architecture"},"BAS Architecture"),(0,o.kt)("p",null,"BAS is a modular framework for creating BSC-compatible sidechains. It defines requirements for integration with the BSC ecosystem and brings development-ready EVM-compatible features like staking, RPC-API, and smart contracts. Since BSC doesn\u2019t rely on the BAS security model, there is no default embedded production-ready bridge solution between the BSC and BAS networks. Instead, BAS can provide protocols and standards for integrating third-party bridges that can be managed by the BAS validator set of other projects like AnySwap or Celer Network cBridge, of course, if they trust the BAS development team."),(0,o.kt)("h2",{id:"bas-structure--integration"},"BAS structure & integration"),(0,o.kt)("p",null,"BAS specifies the primary structure and configuration of the blockchain, using special templates. A ",(0,o.kt)("strong",{parentName:"p"},"template")," is a ready-made blockchain solution that is ",(0,o.kt)("strong",{parentName:"p"},"already integrated into the BSC infrastructure"),". With this integration, developers automatically get access to products like a ready-made staking system, block explorer, SDK, API gateways, interfaces for governance, etc. "),(0,o.kt)("p",null,"After applying templates, BAS can be customized using programmable and configurable ",(0,o.kt)("strong",{parentName:"p"},"modules"),"."),(0,o.kt)("p",null,"\xa0",(0,o.kt)("p",null,(0,o.kt)("img",{alt:"img",src:r(79267).Z}))),(0,o.kt)("h2",{id:"modules"},"Modules"),(0,o.kt)("p",null,"The main goal of BAS is to build such a multi-modular blockchain architecture that it is flexible, convenient, and easy to use."),(0,o.kt)("p",null,"As the current implementation of BAS is built on BSC, all existing modules are built into the system smart contracts and into the EVM machine. In the future, a system of modules will be created to allow you to develop a universal smart contract and a bus for interacting between modules and other parts. This all will make it possible to use such modules in any blockchain solution."),(0,o.kt)("p",null,"BAS brings with it programmable and configurable modules that can be used or modified by developers to reach their business goals, for example:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Networking \u2014 for p2p communication between different BAS nodes."),(0,o.kt)("li",{parentName:"ul"},"Blockchain & EVM \u2014 for block producing and EVM transaction execution, of course, each BAS can define their own runtime execution environment based, for example, on WebAssembly."),(0,o.kt)("li",{parentName:"ul"},"Web3 API \u2014 for basic compatibility with Web3 ecosystem including MetaMask and other applications."),(0,o.kt)("li",{parentName:"ul"},"Transaction Pool \u2014 for managing internal BAS policies for transaction filtering and for charging fees for the system operational."),(0,o.kt)("li",{parentName:"ul"},"PoA & PoS Consensus \u2014 for users to be able to vote for the honest validators in the BAS network and guarantee the safeness of actions applied on the chain."),(0,o.kt)("li",{parentName:"ul"},"Storage & State \u2014 for persisting local data.")),(0,o.kt)("p",null,"Internally, BAS implements the following modules: Parlia consensus engine, staking pools, governance, dynamic runtime upgrades, reward management, manageable blockchain params, EVM hooks, and deployment proxy."),(0,o.kt)("p",null,"This modular architecture allows to re-use or enable/disable different modules. All modules are runtime-upgradable by on-chain governance."),(0,o.kt)("h2",{id:"repositories"},"Repositories"),(0,o.kt)("p",null,"Here is the list repositories provided by Ankr for development on BAS:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/Ankr-network/bas-genesis-config"},"bas-genesis-config")," \u2014 genesis smart contracts and scripts for building the genesis config."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/Ankr-network/bas-template-bsc"},"bas-template-bsc")," \u2014 BAS-compatible BSC-based template."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/Ankr-network/bas-javascript-monorepo"},"bas-javascript-monorepo")," \u2014 mono-repository with all frontend-related packages and SDKs."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/Ankr-network/bas-devnet-setup"},"bas-devnet-setup")," \u2014 scripts for running BAS devnet.")))}p.isMDXComponent=!0},79267:function(e,t,r){t.Z=r.p+"assets/images/bas-architecture1-c44b99cbe46933bdd693361dfa5a21f7.png"}}]);